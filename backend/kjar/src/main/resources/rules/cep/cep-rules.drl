package cep;
import  com.ftn.sbnz.model.TransactionEvent;
import  com.ftn.sbnz.model.Customer;

declare SuspiciousCustomerEvent
    @role(event)
    customerId: Long
    reason: String
end

declare AlarmTriggered
    customerId: Long
end

rule "More than 10 transactions in an hour from one client"
    when
        $t1 : TransactionEvent($customerId: customerId)
        Number(intValue >= 10) from accumulate(
            $t2: TransactionEvent(
                this != $t1, 
                customerId == $customerId, 
                this meets[1h] $t1
            ),
            count($t2)
        )
        not (SuspiciousCustomerEvent(customerId == $customerId, reason == "Too many transactions"))
    then
        insert(new SuspiciousCustomerEvent($customerId, "Too many transactions"));
end

rule "More than 1 transaction of 200 dollars in an hour from the same client"
    
    when
        $t1: TransactionEvent($cId: customerId, totalAmount >= 200.0, $totalAmount: totalAmount)
        // is it exists
        $t2: TransactionEvent(
            this != $t1, 
            this meets[1h] $t1, 
            customerId == $cId, 
            totalAmount >= 200.0
        )
        not (SuspiciousCustomerEvent(customerId == $cId, reason == "Two large transactions"))
    then
        insert(new SuspiciousCustomerEvent($cId, "Two large transactions"));
        System.out.println("More than 1 transaction of 200 (" + $totalAmount + ") dollars in an hour from the same client: " + $cId);
end

rule "More than 3 suspicious cases in the day and we warn the owner"
    when
        SuspiciousCustomerEvent($cId: customerId)
        Number(intValue > 3) from accumulate(
            $se: SuspiciousCustomerEvent(
                $cId == customerId
            ),
            count($se)
        )
        not (AlarmTriggered($cId == customerId))
        
    then
        insert(new AlarmTriggered($cId));
end


rule "More than 10 transactions in an hour from small client portal"
    when
        $t1: TransactionEvent($cId: customerId) from entry-point "small-client-portal"
        Number(intValue >= 10) from accumulate(
            $t2: TransactionEvent(
                this != $t1, 
                customerId == $cId, 
                this meets[1h] $t1
            ) from entry-point "small-client-portal",
            count($t2)
        )
        not (SuspiciousCustomerEvent(customerId == $cId, reason == "Many transactions"))
    then
        insert(new SuspiciousCustomerEvent($cId, "Many transactions"));
end

rule "More than 100 transactions in an hour from big client portal"
    when
        $t1: TransactionEvent($cId: customerId) from entry-point "big-client-portal"
        Number(intValue >= 100) from accumulate(
            $t2: TransactionEvent(
                this != $t1, 
                customerId == $cId, 
                this meets[1h] $t1
            ) from entry-point "big-client-portal",
            count($t2)
        )
        not (SuspiciousCustomerEvent(customerId == $cId, reason == "Many transactions"))
    then
        insert(new SuspiciousCustomerEvent($cId, "Many transactions"));
end


// moje
rule "Two same transations - same custumer & same totalAmount - in 15s"
    when
        $t1: TransactionEvent($customerId: customerId, $totalAmount: totalAmount)
        $t2: TransactionEvent(
            this != $t1,
            customerId == $customerId,
            totalAmount == $totalAmount,
            this after[14s,16s] $t1 // na tacno 15s --> after[15s,15s]
        )
        not (SuspiciousCustomerEvent(customerId == $customerId, reason == "Same transactions"))
    then
        insert(new SuspiciousCustomerEvent($customerId, "Same transactions"));
        modify($t2) { setDuplicate(true);}
        System.out.println("Two same transations - same custumer: "+ $customerId +" & same totalAmount: " + $totalAmount +" - in 15s");
end

rule "Big Suspicious Transaction"
    when 
        $t1: TransactionEvent($customerId: customerId, totalAmount >= 1000)
        $t2: TransactionEvent(
            this != $t1,
            customerId == $customerId,
            totalAmount >= 1000,
            this after[0s,90s] $t1 // na tacno 15s --> after[15s,15s]
        )
        $c: Customer(
            id == $customerId,
            //Nakon njih customer će ostati sa manje od 10% raspoloživih sredstava na računu
            accountSum - $t1.totalAmount - $t2.totalAmount < accountSum * 0.1
        )
        not (SuspiciousCustomerEvent(customerId == $customerId, reason == "Big transactions"))
    then
        insert(new SuspiciousCustomerEvent($customerId, "Big transactions"));
end